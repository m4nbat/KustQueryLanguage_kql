//set a start time for query
let start = startofmonth(now()); 
// can adjust to something like let start = startofmonth(now(-31d)); the -31d can be adjusted to correct number of days to take you into the month you want to report on
//set an end time for query
let end = endofmonth(now());
//Total Incidents in Period
let incidentsInPeriod = materialize(SecurityIncident| where CreatedTime between (start .. end)
| where not(Title has_any ("Missing","Tag")));
let closed_incidents = incidentsInPeriod 
| where Status =~ "Closed" 
| summarize IncClosedTime=arg_min(TimeGenerated, *) by IncidentNumber 
| extend ClosureLabels=Labels | extend ClosedBy=ModifiedBy;
let escalated_incidents = incidentsInPeriod 
| where Labels matches regex '(?i)escalate|(?i)bw.a' or Labels contains "Escalated" 
| summarize EscalationTime=arg_min(TimeGenerated, *) by IncidentNumber 
| extend EscalatedBy=ModifiedBy;
let acknowledged_incidents = incidentsInPeriod 
| where Status in~ ("Active", "Closed") 
| summarize AckTime=arg_min(TimeGenerated, *) by IncidentNumber 
| extend AcknowledgedBy=ModifiedBy;
let unacknowledged_incidents = incidentsInPeriod 
| distinct IncidentNumber | join kind=leftanti acknowledged_incidents on IncidentNumber 
| extend NotAck="Incident hasn't been acknowledged or gap in data"; // Sometimes sentinel seems to miss out some of the stages.
let SLA_Details = (incidentsInPeriod
// grab the most recent status
| summarize arg_max(TimeGenerated, *) by IncidentNumber 
| join kind=leftouter acknowledged_incidents on IncidentNumber
| join kind =leftouter unacknowledged_incidents on IncidentNumber 
| join kind=leftouter closed_incidents on IncidentNumber
| join kind=leftouter escalated_incidents on IncidentNumber
| extend TimeToAcknowledge=iff(isnotempty(AckTime), (AckTime - CreatedTime),totimespan("99:99:99.999999"))
| extend TimeToRespond=iff(isnotempty(ClosedTime), iff(ClosedTime == AckTime, (ClosedTime - CreatedTime), (ClosedTime - AckTime)),totimespan("99:99:99.999999"))
| extend TimeToClose=iff(isnotempty(ClosedTime), (ClosedTime - CreatedTime),totimespan("99:99:99.999999"))
| extend TimeToEscalate=iff(isnotempty(EscalatedBy), (EscalationTime - AckTime),totimespan("99:99:99.999999"))
| extend PriorityRating = case(Severity1 contains "High","P1",                        
                               Severity1 contains "Medium","P2",                        
                               Severity1 contains "Low","P3",                        
                               "P4")
| extend postTriagePriority_ = toupper(extract('(?i)(P[1-5])',1,tostring(Labels)))//ACCOUNT FOR BLANK VALUE BY SETTING PRIORITY AS THE ACKNOWLEDGEMENT PRIORITY RATING
| extend postTriagePriority = iff(isempty(postTriagePriority_),PriorityRating,postTriagePriority_)
//examples of response times for incidents. Time of incident generation to actively being worked by the analyst
| extend MTTA_SLA = case(TimeToAcknowledge > time("00:30:00") and PriorityRating =~ "P1","P1 SLA Fail",
                        TimeToAcknowledge > time("01:00:00") and PriorityRating =~ "P2","P2 SLA Fail",
                        TimeToAcknowledge > time("04:00:00") and PriorityRating =~ "P3","P3 SLA Fail",
                        TimeToAcknowledge > time("24:00:00") and               PriorityRating =~ "P4","P4 SLA Fail",
                        isempty(TimeToAcknowledge), "Acknowledge SLA not recorded at present",
                        TimeToAcknowledge  == totimespan("99:99:99.999999"),  "Acknowledge SLA not recorded at present",
                        "SLA Achieved")                        
//examples of response times for incidents. Time of incident generation to actively being worked by the analyst
| extend MTTR_SLA = case(TimeToRespond > time("00:20:00") and postTriagePriority =~ "P1","P1 SLA Fail",
                        TimeToRespond > time("00:30:00") and postTriagePriority =~ "P2","P2 SLA Fail",
                        TimeToRespond > time("00:40:00") and postTriagePriority =~ "P3","P3 SLA Fail",
                        TimeToRespond > time("01:00:00") and postTriagePriority =~ "P4","P4 SLA Fail",
                        TimeToRespond == totimespan("99:99:99.999999"),  "Response SLA not recorded at present",
                        isempty(TimeToRespond), "Response SLA not recorded at present",
                        "SLA Achieved")
//examples of escalation times for incidents after the initial triage and response timeframe is exceeded
| extend MTTE_SLA = case(TimeToEscalate > time("00:20:00") and postTriagePriority =~ "P1","P1 SLA Fail",
                        TimeToEscalate > time("00:30:00") and postTriagePriority =~ "P2","P2 SLA Fail",
                        TimeToEscalate > time("00:40:00") and postTriagePriority =~ "P3","P3 SLA Fail",
                        TimeToEscalate > time("01:00:00") and postTriagePriority =~ "P4","P4 SLA Fail",
                        TimeToEscalate == totimespan("99:99:99.999999"),  "Not Escalated",
                        TimeToEscalate == time("00:00:00"), "Not Escalated",
                        isempty(TimeToEscalate), "Not Escalated",
                        "SLA Achieved")
//example of closure times for incidents
| extend MTTC_SLA = case(TimeToClose > time("1.00:00:00") and postTriagePriority =~ "P1","P1 SLA Fail",
                        TimeToClose > time("3.00:00:00") and postTriagePriority =~ "P2","P2 SLA Fail",
                        TimeToClose > time("7.00:00:00") and postTriagePriority =~ "P3","P3 SLA Fail",
                        TimeToClose > time("10.00:00:00") and postTriagePriority =~ "P4","P4 SLA Fail",
                        TimeToClose == totimespan("99:99:99.999999"),  "Closure SLA not recorded at present",
                        isempty(TimeToClose), "Closure SLA not recorded at present",
                        "SLA Achieved")| project IncidentNumber, Severity=Severity1, postTriagePriority, PriorityRating, CreatedTime, AckTime, ClosedTime, EscalationTime, TimeToAcknowledge, AcknowledgedBy,TimeToEscalate, EscalatedBy, TimeToClose, ClosedBy, TimeToRespond, MTTA_SLA, MTTR_SLA, MTTE_SLA, MTTC_SLA, ClosureLabels
| project-reorder IncidentNumber, Severity, postTriagePriority, PriorityRating, CreatedTime, AckTime, ClosedTime, EscalationTime, TimeToAcknowledge, AcknowledgedBy, TimeToEscalate, EscalatedBy, TimeToClose, ClosedBy, TimeToRespond, MTTA_SLA, MTTR_SLA, MTTE_SLA, MTTC_SLA);
//Produce mean time to stats
let MTT = SLA_Details
| summarize Incidents=count(),MTTA=avg(TimeToAcknowledge),MTTR=avg(TimeToRespond), MTTE=avg(TimeToEscalate), MTTC=avg(TimeToClose);
//Produce mean time to stats by severity
let MTTBySeverity = SLA_Details
| summarize Incidents=count(),MTTA=avg(TimeToAcknowledge),MTTR=avg(TimeToRespond), MTTE=avg(TimeToEscalate), MTTC=avg(TimeToClose) by Severity=Severity;
//Produce mean time to stats by owner
let MTTByPriority = SLA_Details
| summarize Incidents=count(),MTTA=avg(TimeToAcknowledge),MTTR=avg(TimeToRespond), MTTE=avg(TimeToEscalate), MTTC=avg(TimeToClose) by postTriagePriority;
//Produce mean time to stats by owner work to be done on this one
let MTTByOwner = SLA_Details
| summarize Incidents=count(),MTTA=avg(TimeToAcknowledge),MTTR=avg(TimeToRespond), MTTE=avg(TimeToEscalate), MTTC=avg(TimeToClose);
MTTByPriority
